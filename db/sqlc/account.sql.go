// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: account.sql

package db

import (
	"context"
)

const addAccountBalance = `-- name: AddAccountBalance :one
UPDATE accounts
SET balance = balance + $1
WHERE id = $2
RETURNING id, owner, balance, currency, account_type, created_at
`

type AddAccountBalanceParams struct {
	Amount int64 `json:"amount"`
	ID     int64 `json:"id"`
}

func (q *Queries) AddAccountBalance(ctx context.Context, arg AddAccountBalanceParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, addAccountBalance, arg.Amount, arg.ID)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Balance,
		&i.Currency,
		&i.AccountType,
		&i.CreatedAt,
	)
	return i, err
}

const createUserAccount = `-- name: CreateUserAccount :one
INSERT INTO accounts (
    owner,
    balance,
    currency,
    account_type
) VALUES (
    $1, $2, $3, $4
)
RETURNING id, owner, balance, currency, account_type, created_at
`

type CreateUserAccountParams struct {
	Owner       int64  `json:"owner"`
	Balance     int64  `json:"balance"`
	Currency    string `json:"currency"`
	AccountType string `json:"account_type"`
}

func (q *Queries) CreateUserAccount(ctx context.Context, arg CreateUserAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, createUserAccount,
		arg.Owner,
		arg.Balance,
		arg.Currency,
		arg.AccountType,
	)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Balance,
		&i.Currency,
		&i.AccountType,
		&i.CreatedAt,
	)
	return i, err
}

const getUserAccountForUpdateAccount = `-- name: GetUserAccountForUpdateAccount :one
SELECT id, owner, balance, currency, account_type, created_at FROM accounts
WHERE id = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetUserAccountForUpdateAccount(ctx context.Context, id int64) (Account, error) {
	row := q.db.QueryRowContext(ctx, getUserAccountForUpdateAccount, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Balance,
		&i.Currency,
		&i.AccountType,
		&i.CreatedAt,
	)
	return i, err
}

const getUsersAccounts = `-- name: GetUsersAccounts :many
SELECT id, owner, balance, currency, account_type, created_at FROM accounts
ORDER BY owner
LIMIT $1
OFFSET $2
`

type GetUsersAccountsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetUsersAccounts(ctx context.Context, arg GetUsersAccountsParams) ([]Account, error) {
	rows, err := q.db.QueryContext(ctx, getUsersAccounts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Account
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.Owner,
			&i.Balance,
			&i.Currency,
			&i.AccountType,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsertAccount = `-- name: GetUsertAccount :one
SELECT id, owner, balance, currency, account_type, created_at FROM accounts
WHERE owner = $1 LIMIT 1
`

func (q *Queries) GetUsertAccount(ctx context.Context, owner int64) (Account, error) {
	row := q.db.QueryRowContext(ctx, getUsertAccount, owner)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Balance,
		&i.Currency,
		&i.AccountType,
		&i.CreatedAt,
	)
	return i, err
}

const updateUserAccount = `-- name: UpdateUserAccount :one
UPDATE accounts
SET balance = balance + $2
WHERE id = $1
RETURNING id, owner, balance, currency, account_type, created_at
`

type UpdateUserAccountParams struct {
	ID      int64 `json:"id"`
	Balance int64 `json:"balance"`
}

func (q *Queries) UpdateUserAccount(ctx context.Context, arg UpdateUserAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, updateUserAccount, arg.ID, arg.Balance)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Balance,
		&i.Currency,
		&i.AccountType,
		&i.CreatedAt,
	)
	return i, err
}
